class Solution {
public:

    int findMax(vector<int> & piles){
        int maxi=INT_MIN;
        for(int i=0;i<piles.size();i++){
            maxi=max(maxi,piles[i]);
        }
        return maxi;
    }

    long long calHr(vector<int> &piles, int speed){
        long long  total=0;
        for(int i=0;i<piles.size();i++){
            total += (piles[i] + speed - 1) / speed;
        }
        return total;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int n=piles.size();
        int low=1,high=findMax(piles);

        while(low<=high){
            int mid=low+(high-low)/2;
            long long  totalH=calHr(piles,mid);

            if(totalH<=h){
                high=mid-1;
            }
            else
                low=mid+1;
        }
        return low;
    }
};
